use crate::ScriptManifest;
use crate::generator::Generator;
use std::fmt::Write;
use std::collections::HashMap;
use chrono::Utc;

pub struct KotlinJVMGenerator;

impl Generator for KotlinJVMGenerator {
    fn generate(&self, manifest: &ScriptManifest) -> anyhow::Result<String> {
        let mut output = String::new();

        let local_time = Utc::now();

        writeln!(
            output,
            "// Auto-generated by dropbear-engine with the magna-carta parser on {}",
            local_time.format("%Y-%m-%d %H:%M:%S")
        )?;
        writeln!(output)?;
        writeln!(output, "package com.dropbear")?;
        writeln!(output)?;

        let mut imported_packages = std::collections::HashSet::new();
        for item in manifest.items() {
            if let Some(last_dot) = item.fqcn().rfind('.') {
                let package = &item.fqcn()[..last_dot];
                imported_packages.insert(package.to_string());
            }
        }

        for package in &imported_packages {
            writeln!(output, "import {}.*", package)?;
        }
        writeln!(output)?;

        let mut tag_map: HashMap<String, Vec<String>> = HashMap::new();
        for item in manifest.items() {
            let simple_name = item.simple_name();
            if item.tags().is_empty() {
                continue;
            }
            for tag in item.tags() {
                tag_map.entry(tag.clone()).or_default().push(simple_name.to_string());
            }
        }

        writeln!(output, "object RunnableRegistry {{")?;
        writeln!(output, "    private val TAG_REGISTRY = mapOf(")?;

        let tag_entries: Vec<String> = tag_map
            .iter()
            .map(|(tag, classes)| {
                let factories: Vec<String> = classes
                    .iter()
                    .map(|cls| format!("::{}", cls))
                    .collect();
                format!("        \"{}\" to listOf({})", tag, factories.join(", "))
            })
            .collect();

        if !tag_entries.is_empty() {
            writeln!(output, "{}", tag_entries.join(",\n"))?;
        }

        writeln!(output, "    )")?;
        writeln!(output)?;

        writeln!(
            output,
            "    fun getScriptFactories(tag: String): List<() -> com.dropbear.System> {{"
        )?;
        writeln!(output, "        return TAG_REGISTRY[tag] ?: emptyList()")?;
        writeln!(output, "    }}")?;
        writeln!(output)?;

        writeln!(
            output,
            "    fun instantiateScripts(tag: String): List<com.dropbear.System> {{"
        )?;
        writeln!(
            output,
            "        return getScriptFactories(tag).map {{ it() }}"
        )?;
        writeln!(output, "    }}")?;

        writeln!(output, "}}")?;

        Ok(output)
    }
}