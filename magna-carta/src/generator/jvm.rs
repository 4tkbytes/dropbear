use crate::ScriptManifest;
use crate::generator::Generator;
use std::fmt::Write;
use std::collections::HashMap;
use chrono::Utc;

pub struct KotlinJVMGenerator;

impl Generator for KotlinJVMGenerator {
    fn generate(&self, manifest: &ScriptManifest) -> anyhow::Result<String> {
        let mut output = String::new();

        let local_time = Utc::now();

        writeln!(
            output,
            "// Auto-generated by dropbear-engine with the magna-carta parser on {} UTC",
            local_time.format("%Y-%m-%d %H:%M:%S")
        )?;
        writeln!(output)?;

        writeln!(output, "package com.dropbear.decl")?;
        writeln!(output)?;

        let mut imported_packages = std::collections::HashSet::new();
        for item in manifest.items() {
            if let Some(last_dot) = item.fqcn().rfind('.') {
                let package = &item.fqcn()[..last_dot];
                imported_packages.insert(package.to_string());
            }
        }

        for package in &imported_packages {
            writeln!(output, "import {}.*", package)?;
        }
        writeln!(output)?;

        let mut tag_map: HashMap<String, Vec<String>> = HashMap::new();
        for item in manifest.items() {
            let simple_name = item.simple_name();
            if item.tags().is_empty() {
                continue;
            }
            for tag in item.tags() {
                tag_map.entry(tag.clone()).or_default().push(simple_name.to_string());
            }
        }

        writeln!(output, "object RunnableRegistry {{")?;
        writeln!(output, "    private val tagRegistry = mutableMapOf<String, MutableList<() -> com.dropbear.System>>()")?;
        writeln!(output)?;

        writeln!(output, "    init {{")?;
        writeln!(output, "        registerStaticScripts()")?;
        writeln!(output, "    }}")?;
        writeln!(output)?;

        writeln!(output, "    private fun registerStaticScripts() {{")?;
        for (tag, classes) in &tag_map {
            writeln!(output, "        // Tag: {}", tag)?;
            for class in classes {
                writeln!(
                    output,
                    "        tagRegistry.computeIfAbsent(\"{}\") {{ mutableListOf() }}.add(::{})",
                    tag, class
                )?;
            }
        }
        writeln!(output, "    }}")?;
        writeln!(output)?;

        writeln!(output, "    @Synchronized")?;
        writeln!(output, "    fun reload() {{")?;
        writeln!(output, "        tagRegistry.clear()")?;
        writeln!(output, "        registerStaticScripts()")?;
        writeln!(output, "    }}")?;
        writeln!(output)?;

        writeln!(
            output,
            "    fun getScriptFactories(tag: String): List<() -> com.dropbear.System> {{"
        )?;
        writeln!(output, "        return tagRegistry[tag]?.toList() ?: emptyList()")?;
        writeln!(output, "    }}")?;
        writeln!(output)?;

        writeln!(
            output,
            "    fun instantiateScripts(tag: String): List<com.dropbear.System> {{"
        )?;
        writeln!(
            output,
            "        return getScriptFactories(tag).map {{ it() }}"
        )?;
        writeln!(output, "    }}")?;
        writeln!(output)?;

        writeln!(output, "    fun getAllTags(): Set<String> {{")?;
        writeln!(output, "        return tagRegistry.keys.toSet()")?;
        writeln!(output, "    }}")?;

        writeln!(output, "}}")?;

        Ok(output)
    }
}