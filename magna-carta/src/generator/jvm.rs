use std::fmt::Write;
use crate::generator::Generator;
use crate::ScriptManifest;

pub struct KotlinJVMGenerator;

impl Generator for KotlinJVMGenerator {
    fn generate(&self, manifest: &ScriptManifest) -> anyhow::Result<String> {
        let mut output = String::new();

        writeln!(output, "// Auto-generated by dropbear-engine with the magna-carta parser")?;
        writeln!(output)?;

        // Import all discovered classes
        let mut imported_packages = std::collections::HashSet::new();
        for item in manifest.items() {
            if let Some(last_dot) = item.fqcn().rfind('.') {
                let package = &item.fqcn()[..last_dot];
                imported_packages.insert(package.to_string());
            }
        }

        for package in imported_packages.iter() {
            writeln!(output, "import {}.*", package)?;
        }
        writeln!(output)?;

        // Simple registry class for JVM
        writeln!(output, "object RunnableRegistry {{")?;
        writeln!(output, "    val SCRIPTS = listOf(")?;

        for (i, item) in manifest.items().iter().enumerate() {
            if i > 0 {
                writeln!(output, ",")?;
            }
            writeln!(output, "        {}::class", item.simple_name())?;
        }

        if !manifest.items().is_empty() {
            writeln!(output)?;
        }
        writeln!(output, "    )")?;
        writeln!(output, "}}")?;

        Ok(output)
    }
}

