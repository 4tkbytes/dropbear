use crate::ScriptManifest;
use crate::generator::Generator;
use std::fmt::Write;

pub struct KotlinNativeGenerator;

impl Generator for KotlinNativeGenerator {
    fn generate(&self, manifest: &ScriptManifest) -> anyhow::Result<String> {
        let mut output = String::new();

        // Header
        writeln!(
            output,
            "// Auto-generated by dropbear-engine with the magna-carta parser"
        )?;
        writeln!(
            output,
            "@file:OptIn(ExperimentalForeignApi::class, ExperimentalNativeApi::class)"
        )?;
        writeln!(output)?;

        // Imports
        writeln!(output, "import com.dropbear.DropbearEngine")?;
        writeln!(output, "import com.dropbear.EntityId")?;
        writeln!(output, "import com.dropbear.EntityRef")?;
        writeln!(output, "import com.dropbear.ProjectScriptingMetadata")?;
        writeln!(output, "import com.dropbear.ScriptRegistration")?;
        writeln!(output, "import com.dropbear.ffi.NativeEngine")?;
        writeln!(output, "import kotlinx.cinterop.COpaquePointer")?;
        writeln!(output, "import kotlinx.cinterop.ExperimentalForeignApi")?;
        writeln!(output, "import kotlin.experimental.ExperimentalNativeApi")?;
        writeln!(output, "import kotlin.native.CName")?;
        writeln!(output)?;

        // Import all discovered classes
        let mut imported_classes = std::collections::HashSet::new();
        for item in manifest.items() {
            // Extract package from FQCN to create import
            if let Some(last_dot) = item.fqcn().rfind('.') {
                let package = &item.fqcn()[..last_dot];
                let simple_name = &item.fqcn()[last_dot + 1..];
                writeln!(output, "import {}.{}", package, simple_name)?;
                imported_classes.insert(simple_name.to_string());
            } else {
                // No package, just the class name
                imported_classes.insert(item.simple_name().to_string());
            }
        }
        writeln!(output)?;

        // Script instances registry
        writeln!(
            output,
            "private val scriptInstances: List<ScriptRegistration> by lazy {{"
        )?;
        writeln!(output, "    Metadata().getScripts()")?;
        writeln!(output, "}}")?;
        writeln!(output)?;

        // Metadata class
        writeln!(output, "class Metadata: ProjectScriptingMetadata {{")?;
        writeln!(
            output,
            "    override fun getScripts(): List<ScriptRegistration> {{"
        )?;
        writeln!(output, "        return listOf(")?;

        for (i, item) in manifest.items().iter().enumerate() {
            if i > 0 {
                writeln!(output, ",")?;
            }

            // Format tags
            let tags_str = if item.tags().is_empty() {
                "listOf()".to_string()
            } else {
                let tag_list: Vec<String> = item
                    .tags()
                    .iter()
                    .map(|tag| format!("\"{}\"", tag))
                    .collect();
                format!("listOf({})", tag_list.join(", "))
            };

            writeln!(
                output,
                "            ScriptRegistration(\n                tags = {},\n                script = {}()\n            )",
                tags_str,
                item.simple_name()
            )?;
        }

        if !manifest.items().is_empty() {
            writeln!(output)?;
        }
        writeln!(output, "        )")?;
        writeln!(output, "    }}")?;
        writeln!(output, "}}")?;
        writeln!(output)?;

        // Engine factory function
        writeln!(
            output,
            "fun getDropbearEngine(worldPointer: COpaquePointer?, currentEntity: Long?): DropbearEngine {{"
        )?;
        writeln!(output, "    val nativeEngine = NativeEngine()")?;
        writeln!(output, "    nativeEngine.init(worldPointer)")?;
        writeln!(
            output,
            "    val dropbearEngine = DropbearEngine(nativeEngine, if (currentEntity == null) null else EntityRef(EntityId(currentEntity)))"
        )?;
        writeln!(output, "    return dropbearEngine")?;
        writeln!(output, "}}")?;
        writeln!(output)?;

        // Load function
        writeln!(output, "@CName(\"dropbear_load\")")?;
        writeln!(
            output,
            "fun loadScriptByTag(worldPointer: COpaquePointer?, currentEntity: Long?, tag: String?) {{"
        )?;
        writeln!(output, "    if (tag == null) return")?;
        writeln!(
            output,
            "    val scripts = scriptInstances.filter {{ it.tags.contains(tag) }}"
        )?;
        writeln!(
            output,
            "    val engine = getDropbearEngine(worldPointer, currentEntity)"
        )?;
        writeln!(output, "    for (script in scripts) {{")?;
        writeln!(output, "        script.script.load(engine)")?;
        writeln!(output, "    }}")?;
        writeln!(output, "}}")?;
        writeln!(output)?;

        // Update function
        writeln!(output, "@CName(\"dropbear_update\")")?;
        writeln!(
            output,
            "fun updateScriptByTag(worldPointer: COpaquePointer?, currentEntity: Long?, tag: String?, deltaTime: Double) {{"
        )?;
        writeln!(output, "    if (tag == null) return")?;
        writeln!(
            output,
            "    val scripts = scriptInstances.filter {{ it.tags.contains(tag) }}"
        )?;
        writeln!(
            output,
            "    val engine = getDropbearEngine(worldPointer, currentEntity)"
        )?;
        writeln!(output, "    for (script in scripts) {{")?;
        writeln!(
            output,
            "        script.script.update(engine, deltaTime.toFloat())"
        )?;
        writeln!(output, "    }}")?;
        writeln!(output, "}}")?;
        writeln!(output)?;

        // Destroy function
        writeln!(output, "@CName(\"dropbear_destroy\")")?;
        writeln!(
            output,
            "fun destroyScriptByTag(worldPointer: COpaquePointer?, currentEntity: Long?, tag: String?) {{"
        )?;
        writeln!(output, "    if (tag == null) return")?;
        writeln!(
            output,
            "    val scripts = scriptInstances.filter {{ it.tags.contains(tag) }}"
        )?;
        writeln!(
            output,
            "    val engine = getDropbearEngine(worldPointer, currentEntity)"
        )?;
        writeln!(output, "    for (script in scripts) {{")?;
        writeln!(output, "        script.script.destroy(engine)")?;
        writeln!(output, "    }}")?;
        writeln!(output, "}}")?;

        Ok(output)
    }
}
