name: Build Executables

on:
  push:
    branches: 
    - '**'
  pull_request: {}

jobs:
  build:
    if: contains(github.event.head_commit.message, 'jarvis, run github actions')
    name: Build for ${{ matrix.os_name }}
    runs-on: ${{ matrix.os }}
    env:
      AWS_LC_SYS_PREBUILT_NASM: "1"
    strategy:
      matrix:
        include:
          - os: windows-latest
            os_name: windows-x64
            target: x86_64-pc-windows-msvc
            ext: .exe
          - os: ubuntu-latest
            os_name: linux-x64
            target: x86_64-unknown-linux-gnu
            ext: ""
          - os: macos-latest
            os_name: macos-arm64
            target: aarch64-apple-darwin
            ext: ""

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install nasm -y
        
      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y nasm

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install nasm

      - name: Verify NASM (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "AWS_LC_SYS_PREBUILT_NASM = $env:AWS_LC_SYS_PREBUILT_NASM"
          $nasmPath = where.exe nasm
          if ($LASTEXITCODE -eq 0) {
            Write-Host "System NASM found at $nasmPath"
          } else {
            Write-Host "System NASM not found (this is okay if aws-lc-rs will use prebuilt NASM)."
          }
          exit 0


      - name: Install libudev-dev (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libudev-dev

      - name: Install assimp-utils (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y assimp-utils

      - name: Install assimp (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install assimp

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build eucalyptus
        env:
          AWS_LC_SYS_PREBUILT_NASM: ${{ env.AWS_LC_SYS_PREBUILT_NASM }}
        run: cargo build --release --package eucalyptus-editor --target ${{ matrix.target }}
      
      # - name: Build redback-runtime
      #   run: cargo build --release --package redback-runtime --target ${{ matrix.target }}
      
      - name: Prepare artifact
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/eucalyptus-editor${{ matrix.ext }} dist/
          
          # Copy any library files from target/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/*.dll dist/ 2>/dev/null || true
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cp target/${{ matrix.target }}/release/*.so* dist/ 2>/dev/null || true
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cp target/${{ matrix.target }}/release/*.dylib dist/ 2>/dev/null || true
            cp README.md dist/
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: executables-${{ matrix.os_name }}
          path: dist/
